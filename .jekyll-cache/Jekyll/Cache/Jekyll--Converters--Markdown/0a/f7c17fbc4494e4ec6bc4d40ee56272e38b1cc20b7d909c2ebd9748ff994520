I"<p>In attempting to AJAX-ize the site, I had the desire to handle JSON as if it were form post data. Queue a Rack middleware solution. <code><a href="http://github.com/rack/rack-contrib">rack-contrib</a></code> contains a bunch of common middleware extensions, one being the horribly named <code>PostBodyContentTypeParser</code>. To get this working I added:</p>

<pre lang="ruby" line="1">
require 'rack/contrib'
</pre>

<p>with all of the rest of the required files.</p>

<p>Added:</p>

<pre lang="ruby" line="1">
use Rack::PostBodyContentTypeParser
</pre>

<p>to my application class</p>

<p>And went about <strong>over</strong> testing it like so:</p>

<pre lang="ruby" line="1">
def test_json_creates_params_hash
  params_hash={"user"=&gt;{"username"=&gt;"testuser","email"=&gt;"test@test.com","password"=&gt;"pass1","password_confirmation"=&gt;"pass1"}}
  post '/test_json', params_hash
  assert !last_request.params.blank?
  assert_equal params_hash, last_request.params
  assert last_response.ok?
  json_string="{\"user\":{\"password_confirmation\":\"pass1\",\"username\":\"testuser\",\"password\":\"pass1\",\"email\":\"test@test.com\"}}"
  post '/test_json', JSON(json_string)
  assert !last_request.params.blank?
  assert_equal params_hash, last_request.params
  assert last_response.ok?
  post '/test_json', json_string, "CONTENT_TYPE"=&gt;"application/json"
  assert_equal last_request.env["CONTENT_TYPE"], "application/json"
  assert !last_request.params.blank?
  assert_equal params_hash, last_request.params
  assert last_response.ok?
end
</pre>
:ET
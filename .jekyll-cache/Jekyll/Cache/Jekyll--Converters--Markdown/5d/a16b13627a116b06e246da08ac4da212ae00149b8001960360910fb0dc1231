I"Î<p>This is all made possible by a nifty little <a href="https://github.com/armzilla/amazon-echo-ha-bridge">Java app</a> written by <a href="https://github.com/armzilla">armzilla</a>. Hereâ€™s a quick explanation of the setup:</p>

<table>
  <thead>
    <tr>
      <th>Amazon Echo</th>
      <th>Raspberry Pi</th>
      <th>Vera Home Controller</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>The Echo will communicate with Phillips Hue controllers, but my setup is Vera basedâ€¦ what to do?</td>
      <td>Add a Raspberry Pi- the Raspberry Pi emulates the Phillips controler and transposes it to â€˜Vera speakâ€™</td>
      <td>The Vera is setup with both on and off scenes for the lights that you want to control</td>
    </tr>
  </tbody>
</table>

<h3 id="here-are-the-basic-steps-i-used">Here are the basic steps I used:</h3>

<ul>
  <li>The latest Raspbian has Java 8 installed, so I used that. I got the <a href="https://www.raspberrypi.org/downloads/">Raspbian image</a> from the Raspberry Pi site and â€˜burned itâ€™ on a SD card- (I use <a href="http://www.tweaking4all.com/hardware/raspberry-pi/macosx-apple-pi-baker/">Apple Pi Baker</a>).</li>
  <li>Next, I downloaded the <a href="https://github.com/armzilla/amazon-echo-ha-bridge">Java app</a> and dumped it in the <code class="highlighter-rouge">/home/pi</code> folder. I wrote a small <code class="highlighter-rouge">bash</code> script to make running it a little easier- this looks like this:<script src="https://gist.github.com/funkfinger/96ed2f0fd8a8653787fd.js"></script></li>
  <li>I used <a href="http://localhost:4000/raspberry/pi,/crontab/2015/06/14/starting-something-on-raspberry-pi-boot/">this method</a> to startup the Java app on boot.</li>
  <li>I created both on and off versions for all of my scenes on my Vera- scenes like <code class="highlighter-rouge">room- master bed on [id: 58]</code> and <code class="highlighter-rouge">room- master bed off [id: 59]</code> - make note of the IDs of these scenes, youâ€™
ll need these later</li>
  <li>The configuration of the Java app is done using by using a RESTful API. I used a OS X based tool called <a href="https://luckymarmot.com/paw">Paw</a> To do this. My commands (in text form), looked like this:<script src="https://gist.github.com/funkfinger/e8f296a2064b64049905.js"></script> The <code class="highlighter-rouge">name</code> value is the word(s) your want to use to control the Echo. The on/off IDs are at the end of the on/offUrl values</li>
  <li>repeat for all scenes you want to control via your Echo. Also, youâ€™ll probably want to save these commands as I used the <code class="highlighter-rouge">Forget</code> button on the <code class="highlighter-rouge">Connected Home</code> settings screen a number of times while trying to make this work right.</li>
  <li>Lastly, tell echo to discover your emulated controller. The command to do this is <code class="highlighter-rouge">Alexa, discover devices</code></li>
  <li>Once â€˜sheâ€™ finds the devices, you can control them using the command <code class="highlighter-rouge">Alexa, turn master bedroom on</code></li>
</ul>

<p>This is certainly a hack, but it seems to be working OK for me over the last couple of days. It would be nice if they just played together natively.</p>
:ET